{"mappings":"qhBAUA,IAAAA,EAAAC,EAAA,SAG0C,MAApCC,EAASC,SAASC,cAAc,SAChCC,EAAUF,SAASC,cAAc,kBACjCE,EAASH,SAASC,cAAc,iBAChCG,EAAWJ,SAASC,cAAc,mBAyCG,SAAlCI,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GAEcC,YAAzC,KACLH,EACFF,EAAQ,C,SAAEH,E,MAAUC,IAEJG,EAAT,C,SAAEJ,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CAhDcR,EAApBgB,iBAAiB,UAGE,SAAJC,GACpBA,EAAMC,iBAGsB,IAAxBC,EAAQC,OAAOjB,EAAQkB,OACvBC,EAAOF,OAAOhB,EAAOiB,OACrBE,EAASH,OAAOf,EAASgB,OACzBG,EAAW,GAGXD,GAAU,GAAKJ,EAAQ,GAAKG,EAAO,IAErCG,EAAA3B,GAAS4B,OAAOC,QAAQ,qCAIwB,IAA7C,IAAIC,EAAI,EAAGA,GAAKL,EAAQK,GAAK,EAChCJ,EAAWI,EACXtB,EAAckB,EAAUL,GACrBU,MAAK,EAACtB,SAAEA,EAAQC,MAAEA,MAEjBiB,EAAA3B,GAAS4B,OAAOI,QAAQ,uBAAqBvB,QAAiBC,MAAU,IAEzEuB,OAAM,EAACxB,SAAEA,EAAQC,MAAEA,MAElBiB,EAAA3B,GAAS4B,OAAOC,QAAQ,sBAAoBpB,QAAiBC,MAAU,IAG3EW,GAASG,EAGXtB,EAAOgC,O","sources":["src/js/03-promises.js"],"sourcesContent":["// function createPromise(position, delay) {\n//   const shouldResolve = Math.random() > 0.3;\n//   if (shouldResolve) {\n//     // Fulfill\n//   } else {\n//     // Reject\n//   }\n// }\n\n// Імпортуємо бібліотеку Notiflix:\nimport Notiflix from 'notiflix';\n\n// Отримуємо посилання на DOM-елементи форми та її полів:\nconst formEl = document.querySelector('.form');\nconst delayEl = document.querySelector('[name=\"delay\"]');\nconst stepEl = document.querySelector('[name=\"step\"]');\nconst amountEl = document.querySelector('[name=\"amount\"]');\n\n// Додаємо обробник події 'submit' на форму:\nformEl.addEventListener('submit', onHandleForm);\n\n// Функція обробки події 'submit' на формі:\nfunction onHandleForm(event) {\n  event.preventDefault(); // Відмінюємо діяти форми по замовчуванню (уникнення перезавантаження сторінки)\n\n  // Отримуємо значення з полів форми:\n  let delay = Number(delayEl.value);\n  let step = Number(stepEl.value);\n  let amount = Number(amountEl.value);\n  let position = 0;\n\n  // Перевіряємо, чи введені коректні значення в полі \"Amount\", \"Delay\" і \"Step\":\n  if (amount <= 0 || delay < 0 || step < 0) {\n    // Якщо некоректні - виводимо повідомлення про помилку:\n    Notiflix.Notify.failure(`Please input correct values (>=0)`);\n  }\n\n  // Запускаємо цикл для створення заданої кількості промісів:\n  for (let i = 1; i <= amount; i += 1) {\n    position = i;\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n        // Якщо проміс виконаний - виводимо повідомлення про успіх:\n        Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        // Якщо проміс відхилено - виводимо повідомлення про невдачу:\n        Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n\n    delay += step; // Збільшуємо затримку для наступного промісу на величину \"Step\".\n  }\n\n  formEl.reset(); // Скидаємо значення полів форми до початкових.\n}\n\n// Функція для створення промісу з заданою затримкою:\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3; // Випадково визначаємо, чи проміс буде виконаний чи відхилений.\n\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay }); // Виконання промісу.\n      } else {\n        reject({ position, delay }); // Відхилення промісу.\n      }\n    }, delay);\n  });\n}\n\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$formEl","document","querySelector","$47d4ff9957288465$var$delayEl","$47d4ff9957288465$var$stepEl","$47d4ff9957288465$var$amountEl","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","event","preventDefault","delay1","Number","value","step","amount","position1","$parcel$interopDefault","Notify","failure","i","then","success","catch","reset"],"version":3,"file":"03-promises.ad54c225.js.map"}